name: Tests
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'
defaults:
  run:
    shell: bash
jobs:
  test:
    name: Test Corrosion
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.rust == 'nightly' }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2019 # windows-latest is currently not having a supported MSVC compiler
          - ubuntu-latest
          - macos-10.15
        arch:
          - x86_64
          - i686
          - aarch64
          - powerpc64le
        abi:
          - gnu
          - darwin
          - msvc
        cmake:
          - 3.15.7
          - 3.19.0
        rust:
          - 1.44.1 # Earliest targeted version
          - 1.45.0 # Earliest version compatible with Windows GNU
          - stable
          - nightly
        generator:
          - default # This is just whatever the platform default is
          - ninja
        include:
          - os: macos-latest
            arch: x86_64
            abi: darwin
            cmake: 3.19.0
            rust: 1.44.1
            generator: default
          - os: macos-latest
            arch: x86_64
            abi: darwin
            cmake: 3.19.0
            rust: stable
            generator: ninja
        exclude:

          # You cannot build with GNU using Visual Studio on Windows
          - os: windows-2019
            abi: gnu
            generator: default # Default generator is Visual Studio

          # ARCH
          - os: windows-2019
            arch: i686
            abi: gnu
          - os: windows-2019
            arch: aarch64
            abi: gnu
          - os: windows-2019
            arch: i686
            generator: ninja
          - os: windows-2019
            arch: aarch64
            generator: ninja
          - os: windows-2019
            arch: powerpc64le
          - os: macos-10.15
            arch: i686
          - os: macos-10.15
            arch: aarch64
          - os: macos-10.15
            arch: powerpc64le

          # ABI
          - os: ubuntu-latest
            abi: msvc
          - os: ubuntu-latest
            abi: darwin
          - os: windows-2019
            abi: darwin
          - os: macos-10.15
            abi: msvc
          - os: macos-10.15
            abi: gnu

          # Rust
          # Build each set only with the earliest compatible versioned Rust
          - os: macos-10.15
            rust: 1.45.0
          - os: ubuntu-latest
            rust: 1.45.0
          - os: windows-2019
            abi: msvc
            rust: 1.45.0
          # Prior to 1.45.0, -nostdlib is erroneously passed to g++ when for the *-pc-windows-gnu
          # target. See: https://github.com/rust-lang/rust/pull/71769
          - os: windows-2019
            abi: gnu
            rust: 1.44.1

    steps:
      - name: Determine Rust OS
        id: determine_rust_os
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "::set-output name=os::pc-windows"
            echo "::set-output name=host_abi::msvc"
          elif [ "${{ runner.os }}" == "Linux" ]; then
            echo "::set-output name=os::unknown-linux"
            echo "::set-output name=host_abi::gnu"
          elif [ "${{ runner.os }}" == "macOS" ]; then
            echo "::set-output name=os::apple"
            echo "::set-output name=host_abi::darwin"
          fi
      - name: Pick Compiler
        id: pick_compiler
        run: |
          if [ "${{ matrix.abi }}" == "gnu" ]; then
            if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
              echo "::set-output name=c_compiler::-DCMAKE_C_COMPILER=${{matrix.arch}}-linux-gnu-gcc"
              echo "::set-output name=cxx_compiler::-DCMAKE_CXX_COMPILER=${{matrix.arch}}-linux-gnu-g++"
              echo "::set-output name=system_name::-DCMAKE_SYSTEM_NAME=Linux"
            else
              echo "::set-output name=c_compiler::-DCMAKE_C_COMPILER=gcc"
              echo "::set-output name=cxx_compiler::-DCMAKE_CXX_COMPILER=g++"
            fi
          elif [ "${{ matrix.abi }}" == "darwin" ]; then
            echo "::set-output name=c_compiler::-DCMAKE_C_COMPILER=clang"
            echo "::set-output name=cxx_compiler::-DCMAKE_CXX_COMPILER=clang++"
          elif [ "${{ matrix.abi }}" == "msvc" ]; then
            echo "::set-output name=c_compiler::-DCMAKE_C_COMPILER=cl"
            echo "::set-output name=cxx_compiler::-DCMAKE_CXX_COMPILER=cl"
          fi
      - name: Pick Generator
        id: pick_generator
        run: |
          if [ "${{ matrix.generator }}" == "ninja" ]; then
            echo "::set-output name=generator::-GNinja"
          elif [ "${{ matrix.abi }}" == "default" ]; then
            echo "::set-output name=generator::"
          fi
      - name: CMake Build Flags
        id: cmake_build_flags
        run: |
          echo "::set-output name=cmake_build_flags::--verbose"
      - name: Arch Flags
        id: arch_flags
        run: | # Cross-compiling is currently only supported on Windows+MSVC with the default generator
          if [ "${{ runner.os }}" == "Windows" ]; then
            if [ "${{matrix.generator}}" == "default" ]; then
              if [ "${{ matrix.arch }}" == "x86_64" ]; then
                echo "::set-output name=msvc::amd64"
                echo "::set-output name=cmake::-Ax64"
              elif [ "${{ matrix.arch }}" == "i686" ]; then
                echo "::set-output name=msvc::amd64_x86"
                echo "::set-output name=cmake::-AWin32"
              elif [ "${{ matrix.arch }}" == "aarch64" ]; then
                echo "::set-output name=msvc::amd64_arm64"
                echo "::set-output name=cmake::-AARM64"
              fi
            elif [ "${{matrix.generator}}" == "ninja" ]; then
              # We don't do cross-compiling builds with Ninja
              echo "::set-output name=msvc::amd64"
            fi
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            echo "::set-output name=cmake::-DRust_CARGO_TARGET=${{matrix.arch}}-${{steps.determine_rust_os.outputs.os}}-${{matrix.abi}}"
          fi
      - name: Setup MSVC Development Environment
        uses: ilammy/msvc-dev-cmd@v1.4.1
        with:
          arch: ${{ steps.arch_flags.outputs.msvc }}
        if: ${{ 'msvc' == matrix.abi }}
      - uses: actions/checkout@v2
      - name: Install CMake
        uses: corrosion-rs/install-cmake@v1.1
        with:
          cmake: ${{matrix.cmake}}
          ninja: 1.10.0
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{matrix.rust}}
          target: ${{matrix.arch}}-${{steps.determine_rust_os.outputs.os}}-${{matrix.abi}}
      - name: Install Cross Compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y g++-$(echo "${{matrix.arch}}" | tr _ -)-linux-gnu
        if: ${{ 'ubuntu-latest' == matrix.os }}
      - name: CMake Version
        run: cmake --version
      - name: Rust Version
        run: rustc +${{matrix.rust}} --version
      - name: Configure
        run: >
          cmake
          -S.
          -Bbuild
          -DCORROSION_VERBOSE_OUTPUT=ON
          ${{ steps.arch_flags.outputs.cmake }}
          ${{ steps.pick_compiler.outputs.c_compiler }}
          ${{ steps.pick_compiler.outputs.cxx_compiler }}
          ${{ steps.pick_compiler.outputs.system_name }}
          ${{ steps.pick_generator.outputs.generator }}
          -DRust_TOOLCHAIN="${{matrix.rust}}"
      - name: Run Config Tests (x86_64 Only)
        run: |
          cd build
          cmake \
            --build . ${{steps.cmake_build_flags.outputs.cmake_build_flags}} \
            --target test-install
          ctest --verbose --build-config Debug
        if: ${{ 'x86_64' == matrix.arch && !('windows-2019' == matrix.os && 'gnu' == matrix.abi) }}
      - name: Build C++ program linking Rust
        run: |
          cmake \
            --build build ${{steps.cmake_build_flags.outputs.cmake_build_flags}} \
            --target cpp-exe
      - name: Build Rust program linking C++
        run: |
          cmake \
            --build build ${{steps.cmake_build_flags.outputs.cmake_build_flags}} \
            --target cargo-build_rust-exe
      - name: Build Rust cdylib and link against C++
        run: |
          cmake \
            --build build ${{steps.cmake_build_flags.outputs.cmake_build_flags}} \
            --target my_program
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.abi == 'gnu' }}
      - name: Build host program in cross-compile setup
        run: |
          cmake \
            --build build ${{steps.cmake_build_flags.outputs.cmake_build_flags}} \
            --target cargo-build_rust-host-program
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.abi == 'gnu' && matrix.cmake == '3.19.0' }}
      - name: Run host program in cross-compile setup
        run: |
          ./build/test/hostbuild/rust-host-program
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.abi == 'gnu' && matrix.cmake == '3.19.0' }}
  install:
    name: Test Corrosion as a Library
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2019
          - ubuntu-latest
          - macos-10.15
        method:
          - subdirectory
          - install
    steps:
      - name: Check tests external
        id: check_external
        run: |
          if [ "${{ matrix.method }}" == "subdirectory" ]; then
            echo "::set-output name=find::OFF"
          elif [ "${{ matrix.method }}" == "install" ]; then
            echo "::set-output name=find::ON"
          fi
      - uses: actions/checkout@v2
      - name: Install CMake
        uses: corrosion-rs/install-cmake@v1.1
        with:
          cmake: 3.18.0
          ninja: 1.10.0
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.44.1
          default: true
      - name: CMake Version
        run: cmake --version
      - name: Rust Version
        run: rustc --version
      - name: Install Corrosion
        run: >
          cmake
          -S.
          -Bbuild-corrosion
          -DCORROSION_VERBOSE_OUTPUT=ON
          -DCORROSION_BUILD_TESTS=OFF
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_INSTALL_PREFIX=install-corrosion

          cmake --build build-corrosion --config Release

          cmake --install build-corrosion --config Release
        if: ${{ matrix.method == 'install' }}
      - name: Configure Tests
        run: >
          cmake
          -Stest
          -Bbuild-tests
          -DCORROSION_TESTS_FIND_CORROSION=${{steps.check_external.outputs.find}}
          -DCMAKE_PREFIX_PATH="$PWD/install-corrosion"
      - name: Build Tests
        run: cmake --build build-tests

